%{
  /*
   * program2.lpp
   * Author: Wyatt Emery
   * Date: SEP 20, 2017
   *
   * COSC 4785, Homework2
   *
   */
  
  /* A note: 
   *  I used states for comments because I could not figure out how to do a 
   *  regex that didnt match completed multiline comments as incomplete 
   *  multiline comments. It added two extra states and a few extra rules, but
   *  I don't think it's too messy
   * 
   * 
   * <ERROR>(.+({WORD}|{INVALIDCHARS}+)*)  {
   * //Error char(s) followed valid word
   * setToken(yytext, yylineno, column);
   * column+= token.value.length();
   * BEGIN(INITIAL);
   * return ERR;
}
   */
    #include"Lexeme.h" 
    using namespace std;
    Lexeme token;
    int column = 1;
%}
%option outfile="program2_lex.cpp"
%option noyywrap
%option yylineno

WHITESPACE ([\t \n])
WORD (([a-zA-Z]|_)([a-zA-Z]|[0-9]|_)*)
UNARYOPS [\+\-!] 
RELATIONOPS (==)|(!=)|(<=)|(>=)|(<)|(>) 
SUMOPS (\+)|(-)|(\|\|)
PRODUCTOPS (\*)|(\/)|(\%)|(&&)
PUNCTUATION [.,;()\[\]{}]

INVALIDCHARS2 [^0-9A-Za-z_!=<>+\-*\/;.,|&{}()% \t\n\[\]]

INVALIDCHARS [^0-9A-Z_\(==\)\(!=\)\(<=\)\(>=\)\(&&\)\(\|\|\)<>+\-\*\/!;.,{}()% \t\n\[\]]

VALIDNONWORD [!=<>+\-*\/;.,|&{}()% \t\n[]]

VALIDNONWORD2 {WHITESPACE}|{UNARYOPS}|{RELATIONOPS}|{SUMOPS}|{PRODUCTOPS}|{PUNCTUATION}

%x ERROR
%x COMMENTS
%x ENDCOMMENTS

%%



{UNARYOPS} {
  //Unary Operator
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return UNARYOP; 
}

{RELATIONOPS} {
  //Relation Operator
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return RELATIONOP; 
}

{SUMOPS} {
  //Sum Operator
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return SUMOP; 
}

{PRODUCTOPS} {
  //Product Operator
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return PRODUCTOP; 
}

(=) {
  //Assignment Operator
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return ASSIGNOP; 
}

(class) {
  //class Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return CLASS; 
}

(this) {
  //this Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return THIS; 
}
(if) {
  //if Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  return IF; 
}
(else) {
  //else Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return ELSE; 
}
(while) {
  //while Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return WHILE; 
}
(return) {
  //return Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return RETURN; 
}

(print) {
  //print Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return PRINT; 
}

(read) {
  //read Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return READ; 
}

(void) {
  //void Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return VOID; 
}

(new) {
  //new Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return NEW; 
}

(null) {
  //null Keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
  
  return NULLKEYWORD; 
}

(int) {
  //int keyword
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
}

\/\/.*\n {
  // single line comment
  setToken(yytext, yylineno, column);
  column+= strlen(yytext);
}

[.,;â€™\(\)\[\]{}] {
  //Puncutation
  setToken(yytext, yylineno, column);
  column+= token.value.length();
  
  return PUNCTUATION;
}

[0-9]+ {
  //Number
  setToken(yytext, yylineno, column);
  column+= token.value.length();
  
  return NUM; 
}

{WORD} {
  //identifier
  setToken(yytext, yylineno, column);
  column+= token.value.length();
  
  return IDENTIFIER; 
}

[ ]+ {
    
    setToken(yytext, yylineno, column);
    column+= token.value.length();
    
    return SPACE; 
}

(\t)+ {
    
    setToken(yytext, yylineno, column);
    column+= token.value.length()*8;
    return SPACE;
}

\n {
  
  setToken(yytext, yylineno, column);    
  column = 1;
  
  return SPACE; 
}

(\/\*) {
  column+= strlen(yytext);
  BEGIN(COMMENTS);
  return IGNORE; 
}

. {
  //found an error char, enter error state, ignore captured input
  yyless(0);
  BEGIN(ERROR); 
  
  return IGNORE; 
}

<ERROR>(.+{VALIDNONWORD})  {
  // Error char(s) followed valid non word character
  yyless(strlen(yytext - 1)); //put the last char back into the stream
  setToken(yytext, yylineno, column);
  
  column+= token.value.length();
  BEGIN(INITIAL);
  return ERR;
}


<COMMENTS>([^\*\n])* {
  column+= strlen(yytext);
  BEGIN(ENDCOMMENTS);
  return IGNORE; 
}

<COMMENTS>\* {
  yyless(0);
  BEGIN(ENDCOMMENTS);
  return IGNORE;
}

<COMMENTS>\n {
  column = 1;
  return IGNORE; 
}

<COMMENTS>(\/\*) {
  column+= strlen(yytext);
  return IGNORE; 
}

<ENDCOMMENTS>\n {
  column = 1;
  BEGIN(COMMENTS);
  return IGNORE; 
}

<ENDCOMMENTS>\*\/ {
  column+= strlen(yytext);
  BEGIN(INITIAL);
  return IGNORE;
}

<ENDCOMMENTS>\* {
  column+= strlen(yytext);
  BEGIN(COMMENTS);
  return IGNORE;
}

%%

